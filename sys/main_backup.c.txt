#include <defs.h>
#include <sys/pmap.h>
#include <sys/gdt.h>
#include <print.h>
#include <sys/vmem.h>
#include <sys/idt.h>
#include <sys/timer.h>
#include <sys/tarfs.h>
#include <sys/vfs.h>
#include <process.h>
#include <fs.h>
/*#include <sys/sata.h>*/
#include <keyboard.h>
#include <string.h>

uint64_t *pages_for_ahci_start;
uint64_t *pages_for_ahci_end;
uint64_t *pages_for_ahci_start_virtual;
uint64_t *pages_for_ahci_end_virtual;

void start(uint32_t* modulep, void* physbase, void* physfree)
{

    //     int i = 1;
    //    pages_for_ahci_start_virtual = (uint64_t *)page_alloc(1);
    //   for(i = 1 ; i< 30 ; i++)
    //  {
    //    page_alloc(1);
    //  }
    //  pages_for_ahci_end_virtual = (uint64_t *)(page_alloc(1) + 4096);
    //  pages_for_ahci_start = (uint64_t *)PADDR(pages_for_ahci_start_virtual);
    //  pages_for_ahci_end = (uint64_t *)PADDR(pages_for_ahci_end_virtual);

    mm_init(modulep,physbase,physfree);
    //  pages_for_ahci_start = (uint64_t *)(0x200000 + 0x7ffe000);
    pages_for_ahci_start_virtual = (uint64_t *)kmalloc(32*4096);
    pages_for_ahci_start = (uint64_t *)PADDR(pages_for_ahci_start_virtual);
    pages_for_ahci_start = (uint64_t *)(((uint64_t)pages_for_ahci_start+0x0FFF) & ~ 0x0FFF);
    pages_for_ahci_start_virtual = (uint64_t *)(((uint64_t)pages_for_ahci_start_virtual+0x0FFF) & ~ 0x0FFF);
    memset((void *)pages_for_ahci_start_virtual, 0, 32*4096); 
    print("\n vir %x %x", pages_for_ahci_start_virtual, pages_for_ahci_start_virtual + 32*4096);
    print("\n phy %x %x", pages_for_ahci_start, pages_for_ahci_start + 32*4096);




    //   pages_for_ahci_start = (uint64_t *)PADDR(pages_for_ahci_start_virtual);
    //   pages_for_ahci_end = (uint64_t *)PADDR(pages_for_ahci_end_virtual);


    // boot_map_segment( boot_pml4e, (uintptr_t)pages_for_ahci_start_virtual, 4096*30, (uintptr_t)pages_for_ahci_start,PTE_W|PTE_P|PTE_U);


    reload_gdt();
    reload_idt();
    load_irq();

    init_timer();
    //tarfs_init();
    //setup_tss();
    //first_cs();
    // print("testing 123");
    // print("\n%d", 123);
    // print("\n%s", "Rajesh");
    //print("\n%c", 'q');
    //probe_port((HBA_MEM *)(0xFFFFFFFF00000000+(uintptr_t)0xfebf1000)); 
    //inialize_sata_table();
   /* char test[1200];
    int k = 0;
    for(k=0 ;k<1200; k++)
    {
        if(k<512)
            test[k] = 'x';
        else if (k >= 512 && k <= 700 )
            test[k] = 'y';
        else if (k > 700 && k <= 1000 )
            test[k] = 'z';
        else if (k > 1000 && k <= 1500 )
            test[k] = 'w';
    }   
   */
    //file * fd = file_open("test3.txt");
    //file_write(fd, test, 1500);
    //fd = file_open("test3.txt");
    //print("\nsize new  %d", fd->size);
    //char test1[1000];
    //print("seek %d", file_seek(fd, 100, 100));
    //file_read(test1, 1, 400, fd);
    //puts(test1);
    /*file_open("fs6.txt");
    file_open("fs3.txt");
    file_open("fs4.txt");
   */ // kernel starts here
    __asm__("sti");
    
    int i =0;
    for(i=0; i< 100; i++)
        print("\nhello world %d", i);

   /* 
    //Scanf testing
    print("\n");
    char test[10];
    scanf(test);
    puts(test);
    print("\n");
    char test1[10];
    scanf(test1);
    puts(test1);
   
    //Sleep testing
    sleep(3);
    sleep(10);
    
    //TARFS syscalls
    tarfs_init();
    dir* dd = opendir("etc/");
    dirent *dent;
    //closedir(dd);
    while((dent = readdir(dd)) != NULL)
    {
        print("\n");
        puts(dent->name);
    }
    
    uint64_t fd = fopen("etc/dummy", 1);
    char buff[100];
    fread(fd, buff, 200, 0);
    puts(buff); */
    while(1);
}

#define INITIAL_STACK_SIZE 4096
char stack[INITIAL_STACK_SIZE];
uint32_t* loader_stack;
extern char kernmem, physbase;

void boot(void)
{
    // note: function changes rsp, local stack variables can't be practically used
    //	register char *temp1, *temp2;
    __asm__(
            "movq %%rsp, %0;"
            "movq %1, %%rsp;"
            :"=g"(loader_stack)
            :"r"(&stack[INITIAL_STACK_SIZE])
           );

    /*To clear the screen*/
    clear_screen();


    //setup_tss();
    start(
            (uint32_t*)((char*)(uint64_t)loader_stack[3] + (uint64_t)&kernmem - (uint64_t)&physbase),
            &physbase,
            (void*)(uint64_t)loader_stack[4]
         );
    /*for(
      temp1 = "!!!!! start() returned !!!!!", temp2 = (char*)0xb8000;
     *temp1;
     temp1 += 1, temp2 += 2
     ) *temp2 = *temp1;*/
    while(1);
}
