#include <defs.h>
#include <sys/vfs.h>
#include <my_lib.h>
//#include <print.h>
#include <tarfs.h>
#include<math.h>
//#include <string.h>
//#include <utils.h>
tarfs_entry tarfs_fs[100];
dir dd;
dirent dentd;
file file_desc;

dir vfs_dir;
file vfs_fd;

void init_desc(){
	int i=0;
	vfs_dir.address_tarfs_loc=0x0;
	vfs_fd.address_tarfs_loc=0x0;

	vfs_dir.inode_num=0;
	vfs_fd.inode_num=0;

	vfs_dir.location=DEFAULT_LOC;
	vfs_fd.location=DEFAULT_LOC;

	vfs_dir.perm=0;
	vfs_fd.perm=0;

	vfs_dir.size=0;
	vfs_fd.size=0;

	for(i=0; i<10;i++){
		vfs_dir.sector_loc[i]=0;
		vfs_fd.sector_loc[i]=0;
	}

	vfs_dir.offset=0;
	vfs_fd.offset=0;

	vfs_dir.next=0;
	vfs_fd.next=0;

	vfs_dir.tarfs_table_index=0;
	vfs_fd.tarfs_table_index=0;

	vfs_dir.type=DEFAULT_TYPE;
	vfs_fd.type=DEFAULT_TYPE;

	vfs_dir.filename[0]='\0';
	vfs_fd.filename[0]='\0';
}

int get_per_ind(char *dir){
    char name[100];
    int len = strlen(dir);
    strcpy(&name[0], dir);
    len = len-2;
   // print("  {%d} ", len); 
    while(name[len] != '/'){
        len--;
        if(len == 0)
            return 999;
    }
   // print("  {%d} ", len); 
    name[++len] = '\0';
   //puts(name);
    int i = 0;
    while(strcmp(&name[0], &(tarfs_fs[i].name[0])) !=  0)
        i++;
    //print("parent {%d}", i);
    return i;
}

int get_per_ind_file(char *dir){
    char name[100];
    int len = strlen(dir);
    strcpy(&name[0], dir);
    len = len-1;
   // print("  {%d} ", len); 
    while(name[len] != '/'){
        len--;
        if(len == 0)
            return 999;
    }
   // print("  {%d} ", len); 
    name[++len] = '\0';
   //puts(name);
    int i = 0;
    while(strcmp(&name[0], &(tarfs_fs[i].name[0])) !=  0)
        i++;
    //print("parent {%d}", i);
    return i;
}

uint64_t is_file_exists(char* filename){
		//print("\n tarfs %x", &_binary_tarfs_start);

	    //print("\n tarfs %x", &_begin_tarfs_begin);
	   struct posix_header_ustar *test_tarfs = (struct posix_header_ustar *)&_binary_tarfs_start;
	   int i = 1, temp = 512;
	   uint64_t size;
	   while(strlen(test_tarfs->name) != 0){
		   test_tarfs = (struct posix_header_ustar *)(&_binary_tarfs_start + temp);
		   size = octalToDecimal(atoi(test_tarfs->size));
		   printk("\n");printk(test_tarfs->name);printk("    size %d", size);
		   if(strlen(test_tarfs->name) == 0)
			   return 999;
		   if(strcmp(test_tarfs->name, filename) >= 0)
			   return temp + 512;
		   if(size == 0)
			   temp = temp + 512;
		   else
			   temp +=  (size%512==0) ? size + 512 : size + (512 - size%512) + 512;
		   //print("    %d", temp);
		   i += 1;
	   }
	   return 0;
}

void tarfs_init(){
       struct posix_header_ustar *tarfs_var = (struct posix_header_ustar *)&_binary_tarfs_start;
	   int i = 0, temp = 0;
	   uint64_t size;
       tarfs_entry tarfs_e;
       //int curr_dir= 999;
	   while(1){
		   tarfs_var = (struct posix_header_ustar *)(&_binary_tarfs_start + temp);
           if(strlen(tarfs_var->name) == 0)
                break;
          
		   size = octalToDecimal(atoi(tarfs_var->size));
           strcpy(&tarfs_e.name[0], tarfs_var->name);
           tarfs_e.size = size;
           tarfs_e.addr_hdr = (uint64_t)&_binary_tarfs_start + temp;
           tarfs_e.typeflag = atoi(tarfs_var->typeflag);
           if(tarfs_e.typeflag == FILE_TYPE)
                tarfs_e.par_ind = get_per_ind_file(&(tarfs_e.name[0]));
           else if(tarfs_e.typeflag == DIRECTORY){
                tarfs_e.par_ind = get_per_ind(&(tarfs_e.name[0]));
               // curr_dir = i;
           }
           
                    
            
           tarfs_fs[i] = tarfs_e;
           printk(&(tarfs_fs[i].name[0])); 
           printk("   I[%d]     P[%d] \n", i, tarfs_fs[i].par_ind);
           i++;
		   if(size == 0)
			   temp = temp + 512;
		   else
			   temp +=  (size%512==0) ? size + 512 : size + (512 - size%512) + 512;
	  }
        
      //read_dir("lib/");
      //print("\n%x", open("bin/hello"));
      //char test[10];
      //read_file(open("aaatest"), 4, (uint64_t)test);
}

dir* open_dir_tarfs(char * dir){
    tarfs_entry tarfs_e;
    int i = 0;
    while(1){
        tarfs_e = tarfs_fs[i];
        i++;
        if(strlen(tarfs_e.name) == 0)
            break;
        
        if(strcmp(&(tarfs_e.name[0]), dir) >= 0 && tarfs_e.typeflag == DIRECTORY){
             strcpy(dd.name, dir);
             dd.address = tarfs_e.addr_hdr;
             dd.tarfs_table_index = i-1;
             dd.next = 0;
             return &dd; 
        }
    }
    printk("\n No such directory ");
    return NULL;
}

dirent*  read_dir_tarfs(dir * dird){
    if(dird->next == -1){
        printk("\nInvalid directory pointer.");
        return NULL;
    }
    tarfs_entry tarfs_e;
    int i = 0, parent = -1;
    int child = 0;
    char *dir = dird->name;
    while(1){
        tarfs_e = tarfs_fs[i];
        if(strlen(tarfs_e.name) == 0)
            break;
        
        if( strcmp(&(tarfs_e.name[0]), dir) == 0){
            parent = i;
            i++; 
            continue; 
         }
         if((strncmp(&(tarfs_e.name[0]), dir, strlen(dir)) == 0 ) &&( tarfs_e.par_ind == parent)){
            if(dird->next == child){
                strcpy(dentd.name, tarfs_e.name);
                dentd.type = tarfs_e.typeflag;
                dentd.tarfs_table_index = i-1;
                dird->next = ++child;
                return &dentd;
            }
            child++;
         }
        i++;
    }
    return NULL;
}

int  close_dir_tarfs(dir * dird){
        strcpy(dird->name, "");
        dird->address = 0;
        dird->next = -1;
        dird->tarfs_table_index = -1;
        return 1;
}
/*
uint64_t read_dir_ls(char * dir){
    tarfs_entry tarfs_e;
    int i = 0, parent = -1;
    while(1){
        tarfs_e = tarfs_fs[i];
        if(strlen(tarfs_e.name) == 0)
            break;
        
        if(strcmp(&(tarfs_e.name[0]), dir) == 0){
            parent = i;i++; continue; 
         }
         if((strncmp(&(tarfs_e.name[0]), dir, strlen(dir)) == 0 ) &&( tarfs_e.par_ind == parent)){
            printk(tarfs_e.name + strlen(dir));printk("\n");
         }
        i++;
    }
    return 0;
}
a*/

uint64_t read_dir_ls(dir * dir){
	tarfs_entry tarfs_e;
	int i = dir->tarfs_table_index, parent = -1;
        uint64_t ret_val=0;

	while(1){
		tarfs_e = tarfs_fs[i];
		if(strlen(tarfs_e.name) == 0)
			break;
		if(strcmp(&(tarfs_e.name[0]), dir->name) == 0){
			parent = i;
			i++; 
			continue; 
		}
		if((strncmp(&(tarfs_e.name[0]),(char *) (dir->name), strlen((char *)(dir->name))) == 0 ) &&( tarfs_e.par_ind == parent)){
			printk(tarfs_e.name + strlen(dir));
			printk("\n");
                        ret_val=1;
		}
		i++;
	}
	return ret_val;
}

/*TODO: crete a new file if no file found*/
file *open_file_tarfs(char * file){
shashank
init_desc();
dir vfs_dir;
file vfs_fd;
    tarfs_entry tarfs_e;
    int i = 0;
    while(1){
        tarfs_e = tarfs_fs[i];
        i++;
        if(strlen(tarfs_e.name) == 0)
            break;
    
        if(strcmp(&(tarfs_e.name[0]), file) >= 0 && tarfs_e.typeflag == FILE_TYPE){
            strcpy(vfs_fd.filename, file); 
            vfs_fd.size=tarfs_e.size;
            vfs_fd.type=tarfs_e.typeflag;
            vfs_fd.address_tarfs_loc=tarfs_e.addr_hdr;
            vfs_fd.tarfs_table_index= i-1;
            vfs_fd.offset = 0;
            return &vfs_fd;
        }
    }   
    printk("\n No such file ");
    return NULL;
}
int read_file_tarfs(uint64_t file_addr, void *buf,  int nbytes, int offset)
{
    //printk("Anurag");	
    struct posix_header_ustar* file_hdr = (struct posix_header_ustar *) file_addr; 
    printk("\n");
	printk(file_hdr->name);
    int file_size =  octalToDecimal(atoi(file_hdr->size));
    printk ("\n [addr] %x [size] %d", file_addr, file_size);
    printk ("\n nbytes + offset %d", (nbytes + offset));
	/*
	if(file_size < nbytes + offset){
       //printk("\n Anurag"); 
	return -1;
	}*/
    char * tmp =(char *)buf;
    char * file_start_addr = (char *)(file_addr + 512 + offset);
    printk("\nsize %d file %x", nbytes, file_start_addr);
    int i = 0;
    while(nbytes-- > 0)
    {
        tmp[i++] = *file_start_addr++;
    }    
    tmp[i]='\0';
	//while(1);
    		
    printk("\n");
	printk(tmp);
    return nbytes;
}

int close_file_tarfs(uint64_t file_addr)
{
    strcpy(file_desc.filename, "");
    file_desc.inode_num = -1;
    file_desc.offset = -1;
    file_desc.perm = -1;
    file_desc.size = -1;
    file_desc.type = -1;
    int i = 0;
    for(i=0; i<10; i++)
        file_desc.sector_loc[i] = 0;
    return 1;
}
