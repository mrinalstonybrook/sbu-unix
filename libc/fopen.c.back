#include <stdio.h>
#include<defs.h>
#include<stdio.h>
//#include<my_lib.h>
#include<math.h>
#include<stdlib.h>
#include<syscall.h>
//include<sys/vfs.h>
#include<syscall_dictionary.h>

char mount_fs[10]="/hiphop/";

dir vfs_dir;
file vfs_fd;
int strlen(const char *s) {
	int n;

	for (n = 0; *s != '\0'; s++)
		n++;
	return n;
}

////

int strncmp(const char *s1, const char *s2, uint32_t n)
{
  for ( ; n > 0; s1++, s2++, --n)
    if (*s1 != *s2)
      return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
    else if (*s1 == '\0')
      return 0;
  return 0;
}
///////
/*
void init_desc(){
	int i=0;
	vfs_dir.address_tarfs_loc=0x0;
	vfs_fd.address_tarfs_loc=0x0;

	vfs_dir.inode_num=0;
	vfs_fd.inode_num=0;

	vfs_dir.location=DEFAULT_LOC;
	vfs_fd.location=DEFAULT_LOC;

	vfs_dir.perm=0;
	vfs_fd.perm=0;

	vfs_dir.size=0;
	vfs_fd.size=0;

	for(i=0; i<10;i++){
		vfs_dir.sector_loc[i]=0;
		vfs_fd.sector_loc[i]=0;
	}

	vfs_dir.offset=0;
	vfs_fd.offset=0;

	vfs_dir.next=0;
	vfs_fd.next=0;

	vfs_dir.tarfs_table_index=0;
	vfs_fd.tarfs_table_index=0;

	vfs_dir.type=DEFAULT_TYPE;
	vfs_fd.type=DEFAULT_TYPE;

	vfs_dir.filename[0]='\0';
	vfs_fd.filename[0]='\0';
}
*/
/////////////


file *fopen(char *filename_full_path){

	//init_desc();
	//char *tmp;
	uint64_t name_addr=(uint64_t)filename_full_path;
	uint64_t file_addr;
	file_addr=(uint64_t)&vfs_fd;

	if((strncmp(filename_full_path, mount_fs, strlen(mount_fs))) == 0 ){
		printf("\n ITS IN FILE SYSTEM");
	//	tmp=filename_full_path+7;
	//	name_addr=(uint64_t)tmp;
		__syscall2(FS_OPEN_FILE,name_addr,file_addr);
		goto error;
	}

	__syscall2(TARFS_OPEN_FILE,name_addr,file_addr);

error:
	if(file_addr == NULL)
		return NULL;
	return &vfs_fd;
}
